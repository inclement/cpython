# Android/build-config

ndk_version=14

# Set default values if not defined.
: ${ANDROID_NDK_ROOT:=$HOME/android/android-ndk}
: ${ANDROID_SDK_ROOT:=$HOME/android/android-sdk}
: ${ANDROID_API:=24}
: ${ANDROID_ARCH:=x86_64}

build_config_error ()
{
    echo "Error: $1" >&2
    exit 1
}

! test -d "$ANDROID_NDK_ROOT" && build_config_error "\$ANDROID_NDK_ROOT ($ANDROID_NDK_ROOT) is not a directory."
version=$(cat "$ANDROID_NDK_ROOT/source.properties" | \
    sed -e "s/^.*Pkg.Revision[ \t]*=[ \t]*\([0-9]\+\).*$\|^.*$/\1/" -e "/^$/d")
# test "$version" != $ndk_version &&
#     # build_config_error "The installed NDK version is $version but version $ndk_version is required."
unset ndk_version version

test $((ANDROID_API)) -lt 21 && \
    build_config_error "\$ANDROID_API ($ANDROID_API) must be 21 or greater."
test $((ANDROID_API)) -lt 24 && test "$ANDROID_ARCH" = arm64 && \
    build_config_error "Cannot build or run arm64 at an API level less than 24."

# No NDK has been released at SDK API level 22, use NDK API 21 instead.
test "$ANDROID_API" = 22 && ANDROID_API=21

test -n "$PY_SRCDIR" && ANDROID_BUILD=$($PY_SRCDIR/config.guess)
gcc_version=4.9
case "$ANDROID_ARCH" in
    armv7)
        ANDROID_HOST=arm-linux-androideabi
        APP_ABI=armeabi-v7a
        target=armv7-none-linux-androideabi
        TOOLCHAIN=$ANDROID_HOST-$gcc_version
        SYSROOT="$ANDROID_NDK_ROOT/platforms/android-$ANDROID_API/arch-arm"
        ;;
    arm64)
        ANDROID_HOST=aarch64-linux-android
        APP_ABI=arm64-v8a
        target=aarch64-none-linux-android
        TOOLCHAIN=$ANDROID_HOST-$gcc_version
        ;;
    x86)
        ANDROID_HOST=i686-linux-android
        APP_ABI=x86
        target=i686-none-linux-androideabi
        TOOLCHAIN=x86-$gcc_version
        ;;
    x86_64)
        ANDROID_HOST=x86_64-linux-android
        APP_ABI=x86_64
        target=x86_64-none-linux-androideabi
        TOOLCHAIN=x86_64-$gcc_version
        ;;
    *)
        build_config_error "ANDROID_ARCH must be set to armv7, arm64, x86 or x86_64."
        ;;
esac
unset gcc_version
if test "$ANDROID_ARCH" != armv7; then
    SYSROOT="$ANDROID_NDK_ROOT/platforms/android-$ANDROID_API/arch-$ANDROID_ARCH"
fi

machine=$(uname -m)
kernel=$(uname -s | tr A-Z a-z)
tool_path ()
{
    echo "$ANDROID_NDK_ROOT/toolchains/$1/prebuilt/${kernel}-${machine}"
}
TOOLCHAIN=$(tool_path $TOOLCHAIN)

# Build variables.
CC="$(tool_path llvm)/bin/clang -target $target -gcc-toolchain $TOOLCHAIN"
AR="$TOOLCHAIN/bin/$ANDROID_HOST-ar"
LD="$TOOLCHAIN/bin/$ANDROID_HOST-ld"
RANLIB="$TOOLCHAIN/bin/$ANDROID_HOST-ranlib"
READELF="$TOOLCHAIN/bin/$ANDROID_HOST-readelf"
STRIP="$TOOLCHAIN/bin/$ANDROID_HOST-strip --strip-debug --strip-unneeded"
unset target machine kernel tool_path

# We need to set '--sysroot' both in CFLAGS and CPPFLAGS:
#   * configure needs to have '--sysroot' set in CPPFLAGS when it runs CPP.
#   * Extension modules are not compiled by distutils with CPPFLAGS.
ndk_flags="--sysroot=$ANDROID_NDK_ROOT/sysroot -D__ANDROID_API__=$ANDROID_API -isystem $ANDROID_NDK_ROOT/sysroot/usr/include/$ANDROID_HOST"
CPPFLAGS="$CPPFLAGS $ndk_flags"
CFLAGS="$CFLAGS $ndk_flags"
LDFLAGS="$LDFLAGS --sysroot=$SYSROOT"
unset ndk_flags

ccache -V >/dev/null 2>&1 && { CC="ccache $CC"; CFLAGS="$CFLAGS -Wno-parentheses-equality"; }
